Bajeti Dev log

Day 1

So here's what's happening. I'm going to build and deploy an app in 2 weeks. Every day I will write in the dev log, set a timer for an hour
and a half, code, then write in the dev log again. Weekends have unlimited coding time. Let's learn together.

What are we building? 

Bajeti is a mobile budgeting app that allows you to keep track of your spending. Enter income and expenses and see the difference. Create 
categories to organize your money. View charts for easy insights. Set budgets to keep yourself honest. By connecting your money apps 
Bajeti serves as a single source of all your money tracking info.

Today's task:

I've been procrastinating this for a long time. Let's just start. I want to:

Lock down the design (thanks Dribble)
Design the database (thanks ChatGPT)
Initialize the project (Expo, you rock)

Our stack:

React Native (Expo)

That's all I know for now.

Let's build something.

EOS

That was quick! The app has been initialized. The design has kinda been chosen. The DB structure has kinda been laid out.

Day 2

Let's fully create the first screen. Also let's pull in Realm for the DB and create the first tables. There will be three tables to begin
with:

Transactions
Categories
Sources eg mpesa, bank

This stretched into day 3 because life. The first screen is complete. I have installed a bunch of packages for tailwind, charts and so on.
My design skills need heavy work but it looks decent. 

Pic 1

Day 3

Let's get the DB set up. We'll use Realm.

Day 4 

Changed my mind. We'll use SQLite.

Realm uses Native code so if you're using it with expo you need to do a prebuild. I don't want to.

It didn't work. The DB is proving to be a headache.

Day 5

Adventures in setting up a DB continue. The problem with SQLite is that it was updated recently and
I can't understand the new docs. I have switched to the legacy version. 

Day 6 

The DB is finally set up. I have added the UI for adding transactions. Today we'll do the transaction CRUD.

Transactions can now be added. Yay!
Transactions can now be listed. Yay!
I need data validation, though. Also, there's an insertion bug.

Day 7

Today we finish the transaction CRUD and we deal with the bug from yesterday.

First off, this 90 minute idea of mine was a hoax. Secondly, the SQLite DB was such
a headache today. It kept repeating ids! ChatGPT is convinced that everything is fine
with the setup but still. I ended up adding a uuid to the table as a backup.

Anyway, I need to continue with the CRUD.

Day 8

Yesterday was quite productive. I hooked up the entire first page UI. Now...for the third time, let's finish the transaction CRUD

KPLC did that thing.

Day 9

A very productive Saturday morning. The home screen is showing a summary of the last 7 days. Next, the transaction list should
show a grouped list of spending and earning.

The transaction page is mostly done. It has a lot of bugs, though. I want all pages to have the floating add transaction button
and on the transaction page the add transaction function breaks the app.

Day 10

Fixing the transaction page takes priority then the summary page then we're done.

The page is fixed. Also, in the process I found bugs in the home screen and fixed them. On top of that, I moved some functions
that were duplicated in the two screens into a helper file to keep DRY.

Day 11

Home stretch. The summary page is next. I'm skipping the search function on the transaction page for now.

